# Generated from ./AMMScriptLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,51,311,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,1,0,4,0,105,
        8,0,11,0,12,0,106,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,
        2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,
        6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,
        9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,
        16,1,16,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,21,1,
        21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,
        26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,
        32,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,
        38,1,38,1,39,3,39,247,8,39,1,39,4,39,250,8,39,11,39,12,39,251,1,
        39,1,39,4,39,256,8,39,11,39,12,39,257,3,39,260,8,39,1,40,1,40,5,
        40,264,8,40,10,40,12,40,267,9,40,1,40,1,40,1,41,1,41,1,41,1,41,1,
        41,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,
        45,1,45,1,46,1,46,5,46,292,8,46,10,46,12,46,295,9,46,1,46,1,46,1,
        47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,5,50,307,8,50,10,50,12,50,
        310,9,50,0,0,51,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
        22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,
        33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,
        44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,1,0,6,3,0,9,10,13,
        13,32,32,1,0,48,57,3,0,10,10,13,13,34,34,2,0,10,10,13,13,3,0,65,
        90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,318,0,1,1,0,0,0,0,3,
        1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
        0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
        0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,
        0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,
        0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,
        0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,
        0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,
        0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,
        0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,
        0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,1,104,
        1,0,0,0,3,110,1,0,0,0,5,114,1,0,0,0,7,120,1,0,0,0,9,123,1,0,0,0,
        11,128,1,0,0,0,13,132,1,0,0,0,15,138,1,0,0,0,17,143,1,0,0,0,19,150,
        1,0,0,0,21,156,1,0,0,0,23,165,1,0,0,0,25,172,1,0,0,0,27,177,1,0,
        0,0,29,185,1,0,0,0,31,188,1,0,0,0,33,191,1,0,0,0,35,193,1,0,0,0,
        37,195,1,0,0,0,39,198,1,0,0,0,41,201,1,0,0,0,43,203,1,0,0,0,45,206,
        1,0,0,0,47,209,1,0,0,0,49,212,1,0,0,0,51,215,1,0,0,0,53,217,1,0,
        0,0,55,219,1,0,0,0,57,221,1,0,0,0,59,223,1,0,0,0,61,225,1,0,0,0,
        63,227,1,0,0,0,65,230,1,0,0,0,67,233,1,0,0,0,69,235,1,0,0,0,71,237,
        1,0,0,0,73,239,1,0,0,0,75,241,1,0,0,0,77,243,1,0,0,0,79,246,1,0,
        0,0,81,261,1,0,0,0,83,270,1,0,0,0,85,275,1,0,0,0,87,281,1,0,0,0,
        89,284,1,0,0,0,91,287,1,0,0,0,93,289,1,0,0,0,95,298,1,0,0,0,97,300,
        1,0,0,0,99,302,1,0,0,0,101,304,1,0,0,0,103,105,7,0,0,0,104,103,1,
        0,0,0,105,106,1,0,0,0,106,104,1,0,0,0,106,107,1,0,0,0,107,108,1,
        0,0,0,108,109,6,0,0,0,109,2,1,0,0,0,110,111,5,115,0,0,111,112,5,
        101,0,0,112,113,5,116,0,0,113,4,1,0,0,0,114,115,5,112,0,0,115,116,
        5,114,0,0,116,117,5,105,0,0,117,118,5,110,0,0,118,119,5,116,0,0,
        119,6,1,0,0,0,120,121,5,105,0,0,121,122,5,102,0,0,122,8,1,0,0,0,
        123,124,5,101,0,0,124,125,5,108,0,0,125,126,5,115,0,0,126,127,5,
        101,0,0,127,10,1,0,0,0,128,129,5,102,0,0,129,130,5,111,0,0,130,131,
        5,114,0,0,131,12,1,0,0,0,132,133,5,119,0,0,133,134,5,104,0,0,134,
        135,5,105,0,0,135,136,5,108,0,0,136,137,5,101,0,0,137,14,1,0,0,0,
        138,139,5,102,0,0,139,140,5,117,0,0,140,141,5,110,0,0,141,142,5,
        99,0,0,142,16,1,0,0,0,143,144,5,114,0,0,144,145,5,101,0,0,145,146,
        5,116,0,0,146,147,5,117,0,0,147,148,5,114,0,0,148,149,5,110,0,0,
        149,18,1,0,0,0,150,151,5,98,0,0,151,152,5,114,0,0,152,153,5,101,
        0,0,153,154,5,97,0,0,154,155,5,107,0,0,155,20,1,0,0,0,156,157,5,
        99,0,0,157,158,5,111,0,0,158,159,5,110,0,0,159,160,5,116,0,0,160,
        161,5,105,0,0,161,162,5,110,0,0,162,163,5,117,0,0,163,164,5,101,
        0,0,164,22,1,0,0,0,165,166,5,115,0,0,166,167,5,119,0,0,167,168,5,
        105,0,0,168,169,5,116,0,0,169,170,5,99,0,0,170,171,5,104,0,0,171,
        24,1,0,0,0,172,173,5,99,0,0,173,174,5,97,0,0,174,175,5,115,0,0,175,
        176,5,101,0,0,176,26,1,0,0,0,177,178,5,100,0,0,178,179,5,101,0,0,
        179,180,5,102,0,0,180,181,5,97,0,0,181,182,5,117,0,0,182,183,5,108,
        0,0,183,184,5,116,0,0,184,28,1,0,0,0,185,186,5,61,0,0,186,187,5,
        61,0,0,187,30,1,0,0,0,188,189,5,33,0,0,189,190,5,61,0,0,190,32,1,
        0,0,0,191,192,5,60,0,0,192,34,1,0,0,0,193,194,5,62,0,0,194,36,1,
        0,0,0,195,196,5,60,0,0,196,197,5,61,0,0,197,38,1,0,0,0,198,199,5,
        62,0,0,199,200,5,61,0,0,200,40,1,0,0,0,201,202,5,61,0,0,202,42,1,
        0,0,0,203,204,5,43,0,0,204,205,5,61,0,0,205,44,1,0,0,0,206,207,5,
        45,0,0,207,208,5,61,0,0,208,46,1,0,0,0,209,210,5,42,0,0,210,211,
        5,61,0,0,211,48,1,0,0,0,212,213,5,47,0,0,213,214,5,61,0,0,214,50,
        1,0,0,0,215,216,5,43,0,0,216,52,1,0,0,0,217,218,5,45,0,0,218,54,
        1,0,0,0,219,220,5,42,0,0,220,56,1,0,0,0,221,222,5,47,0,0,222,58,
        1,0,0,0,223,224,5,94,0,0,224,60,1,0,0,0,225,226,5,37,0,0,226,62,
        1,0,0,0,227,228,5,45,0,0,228,229,5,45,0,0,229,64,1,0,0,0,230,231,
        5,43,0,0,231,232,5,43,0,0,232,66,1,0,0,0,233,234,5,40,0,0,234,68,
        1,0,0,0,235,236,5,41,0,0,236,70,1,0,0,0,237,238,5,123,0,0,238,72,
        1,0,0,0,239,240,5,125,0,0,240,74,1,0,0,0,241,242,5,91,0,0,242,76,
        1,0,0,0,243,244,5,93,0,0,244,78,1,0,0,0,245,247,5,45,0,0,246,245,
        1,0,0,0,246,247,1,0,0,0,247,249,1,0,0,0,248,250,7,1,0,0,249,248,
        1,0,0,0,250,251,1,0,0,0,251,249,1,0,0,0,251,252,1,0,0,0,252,259,
        1,0,0,0,253,255,5,46,0,0,254,256,7,1,0,0,255,254,1,0,0,0,256,257,
        1,0,0,0,257,255,1,0,0,0,257,258,1,0,0,0,258,260,1,0,0,0,259,253,
        1,0,0,0,259,260,1,0,0,0,260,80,1,0,0,0,261,265,5,34,0,0,262,264,
        8,2,0,0,263,262,1,0,0,0,264,267,1,0,0,0,265,263,1,0,0,0,265,266,
        1,0,0,0,266,268,1,0,0,0,267,265,1,0,0,0,268,269,5,34,0,0,269,82,
        1,0,0,0,270,271,5,116,0,0,271,272,5,114,0,0,272,273,5,117,0,0,273,
        274,5,101,0,0,274,84,1,0,0,0,275,276,5,102,0,0,276,277,5,97,0,0,
        277,278,5,108,0,0,278,279,5,115,0,0,279,280,5,101,0,0,280,86,1,0,
        0,0,281,282,5,38,0,0,282,283,5,38,0,0,283,88,1,0,0,0,284,285,5,124,
        0,0,285,286,5,124,0,0,286,90,1,0,0,0,287,288,5,33,0,0,288,92,1,0,
        0,0,289,293,5,35,0,0,290,292,8,3,0,0,291,290,1,0,0,0,292,295,1,0,
        0,0,293,291,1,0,0,0,293,294,1,0,0,0,294,296,1,0,0,0,295,293,1,0,
        0,0,296,297,6,46,0,0,297,94,1,0,0,0,298,299,5,44,0,0,299,96,1,0,
        0,0,300,301,5,59,0,0,301,98,1,0,0,0,302,303,5,58,0,0,303,100,1,0,
        0,0,304,308,7,4,0,0,305,307,7,5,0,0,306,305,1,0,0,0,307,310,1,0,
        0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,102,1,0,0,0,310,308,1,0,
        0,0,9,0,106,246,251,257,259,265,293,308,1,6,0,0
    ]

class AMMScriptLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    WHITESPACE = 1
    SET = 2
    PRINT = 3
    IF = 4
    ELSE = 5
    FOR = 6
    WHILE = 7
    FUNCTION = 8
    RETURN = 9
    BREAK = 10
    CONTINUE = 11
    SWITCH = 12
    CASE = 13
    DEFAULT = 14
    EQUAL_EQUAL = 15
    NOT_EQUAL = 16
    LESS = 17
    GREATER = 18
    LESS_EQUAL = 19
    GREATER_EQUAL = 20
    EQUAL = 21
    PLUS_EQUAL = 22
    MINUS_EQUAL = 23
    MULTIPLY_EQUAL = 24
    DIVIDE_EQUAL = 25
    PLUS = 26
    MINUS = 27
    MULTIPLY = 28
    DIVIDE = 29
    POWER = 30
    MODULO = 31
    MINUS_MINUS = 32
    PLUS_PLUS = 33
    LPAREN = 34
    RPAREN = 35
    LBRACE = 36
    RBRACE = 37
    LBRACKET = 38
    RBRACKET = 39
    NUMBER = 40
    STRING = 41
    TRUE = 42
    FALSE = 43
    AND = 44
    OR = 45
    NOT = 46
    COMMENT = 47
    COMMA = 48
    SEMICOLON = 49
    COLON = 50
    ID = 51

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'set'", "'print'", "'if'", "'else'", "'for'", "'while'", "'func'", 
            "'return'", "'break'", "'continue'", "'switch'", "'case'", "'default'", 
            "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'='", "'+='", 
            "'-='", "'*='", "'/='", "'+'", "'-'", "'*'", "'/'", "'^'", "'%'", 
            "'--'", "'++'", "'('", "')'", "'{'", "'}'", "'['", "']'", "'true'", 
            "'false'", "'&&'", "'||'", "'!'", "','", "';'", "':'" ]

    symbolicNames = [ "<INVALID>",
            "WHITESPACE", "SET", "PRINT", "IF", "ELSE", "FOR", "WHILE", 
            "FUNCTION", "RETURN", "BREAK", "CONTINUE", "SWITCH", "CASE", 
            "DEFAULT", "EQUAL_EQUAL", "NOT_EQUAL", "LESS", "GREATER", "LESS_EQUAL", 
            "GREATER_EQUAL", "EQUAL", "PLUS_EQUAL", "MINUS_EQUAL", "MULTIPLY_EQUAL", 
            "DIVIDE_EQUAL", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "POWER", 
            "MODULO", "MINUS_MINUS", "PLUS_PLUS", "LPAREN", "RPAREN", "LBRACE", 
            "RBRACE", "LBRACKET", "RBRACKET", "NUMBER", "STRING", "TRUE", 
            "FALSE", "AND", "OR", "NOT", "COMMENT", "COMMA", "SEMICOLON", 
            "COLON", "ID" ]

    ruleNames = [ "WHITESPACE", "SET", "PRINT", "IF", "ELSE", "FOR", "WHILE", 
                  "FUNCTION", "RETURN", "BREAK", "CONTINUE", "SWITCH", "CASE", 
                  "DEFAULT", "EQUAL_EQUAL", "NOT_EQUAL", "LESS", "GREATER", 
                  "LESS_EQUAL", "GREATER_EQUAL", "EQUAL", "PLUS_EQUAL", 
                  "MINUS_EQUAL", "MULTIPLY_EQUAL", "DIVIDE_EQUAL", "PLUS", 
                  "MINUS", "MULTIPLY", "DIVIDE", "POWER", "MODULO", "MINUS_MINUS", 
                  "PLUS_PLUS", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACKET", 
                  "RBRACKET", "NUMBER", "STRING", "TRUE", "FALSE", "AND", 
                  "OR", "NOT", "COMMENT", "COMMA", "SEMICOLON", "COLON", 
                  "ID" ]

    grammarFileName = "AMMScriptLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


